// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  EVENT_OWNER
}

model User {
  id        String    @id // Firebase UID
  email     String    @unique
  name      String
  role      UserRole  @default(EVENT_OWNER)
  events    Event[]
  comments  Comment[]
  reports   Report[]  @relation("reporterRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum EventStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Event {
  id          String      @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  capacity    Int?
  isPaid      Boolean     @default(false)
  price       Float?      @default(0)
  status      EventStatus @default(PENDING_REVIEW)
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])
  rsvps       RSVP[]
  comments    Comment[]
  reports     Report[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model RSVP {
  id        String   @id @default(uuid())
  eventId   String
  name      String
  email     String
  status    String   @default("pending") // pending, confirmed, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])

  @@index([eventId])
  @@index([email])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  eventId   String
  userId    String
  isHidden  Boolean  @default(false)
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([userId])
}

model Report {
  id        String   @id @default(uuid())
  reason    String
  status    String   @default("PENDING") // PENDING, RESOLVED, DISMISSED
  eventId   String?
  commentId String?
  reporterId String
  event     Event?   @relation(fields: [eventId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  reporter  User     @relation("reporterRelation", fields: [reporterId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([commentId])
  @@index([reporterId])
}
